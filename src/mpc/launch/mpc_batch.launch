<?xml version="1.0"?>
<launch>

    <!--initialize the arguments-->
    <arg name="world_number" default="0"/>
    <arg name="gui" default="true" />
    <arg name="mpc_model" default="0"/>
    <arg name="opponent_model" default="0"/>
    <arg name="target_model" default="0"/>
    <arg name="experiment_number" default="0"/>
    <arg name="enable_dynamic_obstacles" default="false"/>
    <arg name="enable_static_obstacles" default="false"/>

    <arg name="random_seed" default="15"/>
    <arg name="output" default="log"/>
    
    <!--how long to run each experiment before timeout-->
    <arg name="timeout" default = "-1"/>

    <!--Initial States of Vehicles for this scenario, ego car is racecar2-->
    <arg name="world_name" if="$(eval arg('world_number')==0)" value="track_porto"/>
    <arg name="world_name" if="$(eval arg('world_number')==1)" value="racecar_walker"/>
    <arg name="world_name" if="$(eval arg('world_number')==2)" value="track_barca"/>

    <!--Initial States of Vehicles for this scenario, ego car is racecar2
        The intitial positions also depend on the racetrack-->
    <arg name="racecar_pose" default="-x -3.5 -y -0.2 -z 0.05"  if="$(eval arg('world_name')=='track_porto')"/>
    <arg name="racecar2_pose" default="-x 1.5 -y 1.0 -z 0.05"   if="$(eval arg('world_name')=='track_porto')"/>
    <arg name="racecar3_pose" default="-x -1.5 -y 0.05 -z 0.05" if="$(eval arg('world_name')=='track_porto')"/>

    <arg name="racecar_pose" default="-x 0.0898 -y -0.174 -z 0.05"  if="$(eval arg('world_name')=='track_barca')"/>
    <arg name="racecar2_pose" default="-x -2.68 -y 1.38 -z 0.05"   if="$(eval arg('world_name')=='track_barca')"/>
    <arg name="racecar3_pose" default="-x -7.63 -y 3.61 -z 0.05" if="$(eval arg('world_name')=='track_barca')"/>

    <arg name="racecar_pose" default="-x 4.03 -y 0.324 -z 0.05"  if="$(eval arg('world_name')=='racecar_walker')"/>
    <arg name="racecar2_pose" default="-x -0.219 -y 0.376 -z 0.05"   if="$(eval arg('world_name')=='racecar_walker')"/>
    <arg name="racecar3_pose" default="-x -3.5 -y -0.711 -z 0.05" if="$(eval arg('world_name')=='racecar_walker')"/>

    <!--waypoint file used by pure pursuit algorithm-->
    <arg name="csv_filename" default="track_porto_26780.csv"    if="$(eval arg('world_name')=='track_porto')"/>
    <arg name="csv_filename" default="racecar_walker_28998.csv" if="$(eval arg('world_name')=='racecar_walker')"/>
    <arg name="csv_filename" default="track_barca_47396.csv"    if="$(eval arg('world_name')=='track_barca')"/>

    <arg name="map_file" default="$(find race)/maps/porto_track.yaml"  if="$(eval arg('world_name')=='track_porto')"/>
    <arg name="map_file" value="$(find race)/maps/racecar_walker.yaml" if="$(eval arg('world_name')=='racecar_walker')"/>
    <arg name="map_file"  value="$(find race)/maps/track_barca.yaml"   if="$(eval arg('world_name')=='track_barca')"/> 

    <!--Handles finding the wall points-->
    <arg name="wall_points" if="$(eval arg('world_name')=='track_porto')" value="porto_obstacles.txt"/>
    <arg name="wall_points" if="$(eval arg('world_name')=='racecar_walker')" value="racecar_walker_obstacles.txt"/>
    <arg name="wall_points" if="$(eval arg('world_name')=='track_barca')" value="track_barca_obstacles.txt"/>

      <!--docker requirements-->
    <arg name="use_sim_time" default = "true"/>
    <arg name="verbose" default ="false"/>

    <!--multi-agent parameters-->
    <!--How many boxes to let rviz visualize-->
    <arg name="box_display_limit" default="100"/>

    <!-- reach-time is the time we are computing reachability for-->
    <arg name="reach_time" default="0.5"/>

    <!--wall-time is the time we allow the reachability algorithm to run for-->
    <arg name="wall_time" default="1.0"/>

    <!--number of vehicles to launch in the simulation environment-->
    <arg name='number_of_cars' default='2'/>

    <!--Select the car we are computing reachability for-->
    <arg name='car_name' default='racecar2'/>

    <arg name="rviz_disp" default="multiagent_reach.rviz"/>


    <!--  This is the main launch file that launches the world, plugins, controllers, vehicles -->
     <include file="$(find race)/launch/multi_agent_gen.launch">
      <arg name="racecar_pose" value="$(arg racecar_pose)"/>
      <arg name="racecar2_pose" value="$(arg racecar2_pose)"/>
      <arg name="racecar3_pose" value="$(arg racecar3_pose)"/>
      <arg name="number_of_cars" value="$(arg number_of_cars)"/>
      <arg name="gui" value="$(arg gui)"/>
      <arg name="rviz_disp" value="$(arg rviz_disp)"/>
      <arg name="world_name" value="$(arg world_name)"/>
    </include>

    <node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />

    <!--The next few blocks handle generating the labels for the log files that will 
        be generated during the experimental campaigns-->
    <!--Handles selecting mpc version-->
    <arg name="controller_name" if="$(eval arg('mpc_model')==0)" value="mpc_hype"/>
    <arg name="controller_name" if="$(eval arg('mpc_model')==1)" value="mpcc"/>
    <arg name="controller_name" if="$(eval arg('mpc_model')==2)" value="disparity_extender"/>
    <arg name="controller_name" if="$(eval arg('mpc_model')==3)" value="pure_pursuit"/>

    <!--Handles selecting opponent controller-->
    <arg name="opp_controller" if="$(eval arg('opponent_model')==0)" value="disparity_extender"/>
    <arg name="opp_controller" if="$(eval arg('opponent_model')==1)" value="pure_pursuit"/>

    <!--Handles selecting controller for target point selection-->
    <arg name="target_controller" if="$(eval arg('target_model')==0)" value="disparity_extender"/>
    <arg name="target_controller" if="$(eval arg('target_model')==1)" value="pure_pursuit"/>

    <!-- how many obstacles are allocated in the environment-->
    <arg name="num_obstacles" if="$(arg enable_dynamic_obstacles)" value="4"/>
    <arg name="num_obstacles" if="$(arg enable_static_obstacles)" value="10"/>
    <arg name="num_obstacles" unless="$(eval arg('enable_dynamic_obstacles') or arg('enable_static_obstacles'))" value="0"/>

    <!-- name of collision log file-->
    <arg name="collision_file" value ="collisions_$(arg world_name)_$(arg enable_dynamic_obstacles)_$(arg controller_name)_$(arg opp_controller)_$(arg target_controller).csv"/>
    <node pkg = "mpc" name= "collision_logger_$(arg car_name)" output="$(arg output)" required="true" type ="collision_logger.py" args="$(arg car_name) $(arg num_obstacles) $(arg random_seed) $(arg collision_file) $(arg world_name) $(arg experiment_number)"/>


    <!--Launch The Node Providing the target point for mpc-->
    <node pkg="race" name="disparity_extender_target_point" type="disparity_extender_ftg.py" args="racecar2"  if="$(eval arg('target_model')==0)" required="true"/>
    <node pkg="pure_pursuit" type="pure_pursuit_angle.py" name="pure_pursuit" if="$(eval arg('target_model')==1)" args="$(arg car_name) $(arg csv_filename) none" output="$(arg output)" required="true"/>
   

    <!--Launch MPC Files-->
    <node pkg="mpc" type="mpc_drive_hyperplanes.py" name="mpc_node" output="$(arg output)" if="$(eval arg('mpc_model')==0)"  args="racecar2 $(arg csv_filename) $(arg wall_points)" required="true"/> 
    <node pkg="mpc" type="mpcc_hyperplanes.py" name="mpc_node" output="$(arg output)" if="$(eval arg('mpc_model')==1)" args="racecar2 $(arg csv_filename) $(arg wall_points)" required="true"/>

     <!-- controller for ego vehicle baseline tests  -->
    <node pkg="race" name="mpc_node" type="disparity_extender_vanderbilt_gen.py"  args="$(arg car_name) 9"  if="$(eval arg('mpc_model')==2)" output="$(arg output)" required="true"/>
    <node pkg="pure_pursuit" type="pure_pursuit.py" name="mpc_node" args="$(arg car_name) $(arg csv_filename)"  if="$(eval arg('mpc_model')==3)" output="$(arg output)" required="true"/> 

    <!--Launch Reachability Nodes-->
    <node name="vehicle_1" pkg="rtreach" type="visualize_obs" args="racecar   $(arg wall_time) $(arg reach_time) $(arg box_display_limit)" output="log"/>
    <node name="vehicle_2" pkg="rtreach" type="visualize_obs" args="racecar3   $(arg wall_time) $(arg reach_time) $(arg box_display_limit)" output="log"/>


    <!-- controller for opponent vehicle  -->
    <node pkg="race" name="disparity_extender_opponent_vehicle" type="disparity_extender_vanderbilt_gen.py"  if="$(eval arg('opponent_model')==0)" args="racecar 9"/>
    <node pkg="race" name="disparity_extender_opponent_vehicle1" type="disparity_extender_vanderbilt_gen.py" if="$(eval arg('opponent_model')==0)" args="racecar3 9"/>
    
    <node pkg="pure_pursuit" type="pure_pursuit.py" name="pure_pursuit_opp_car2" args="racecar $(arg csv_filename)"  if="$(eval arg('opponent_model')==1)" output="$(arg output)" required="true"/> 
    <node pkg="pure_pursuit" type="pure_pursuit.py" name="pure_pursuit_opp_car" args="racecar3 $(arg csv_filename)"  if="$(eval arg('opponent_model')==1)" output="$(arg output)" required="true"/> 

    <!--Spawn Static and Dynamic Obstacles-->
    <node pkg="racecar_gazebo" name="spawn_cones" type="spawn_zigzag.py" if="$(arg enable_static_obstacles)" output= "screen" required="true"/>
    <include file="$(find mpc)/launch/dynamic_boxes_launch.launch" if="$(arg enable_dynamic_obstacles)"/>

    <!--time out node-->
    <node pkg="racecar_gazebo" type="kill_simulation.py" name="timeout" required="true" args = "$(arg timeout)" output="$(arg output)"/>




    <arg name="progression_file" value ="progress_$(arg world_name)_$(arg enable_dynamic_obstacles)_$(arg controller_name)_$(arg opp_controller)_$(arg target_controller).csv"/>

    <!--node for computing progress-->
    <node pkg = "mpc" name= "progress_logger_$(arg car_name)" output="screen"
      required="true" type ="compute_track_progress.py" 
      args="$(arg car_name) $(arg csv_filename) $(arg progression_file) $(arg experiment_number)"/>

    <node pkg = "mpc" name= "progress_logger_racecar" output="screen"
      required="true" type ="compute_track_progress.py" 
      args="racecar $(arg csv_filename) $(arg progression_file) $(arg experiment_number)"/>


    <node pkg = "mpc" name= "progress_logger_racecar" output="screen"
      required="true" type ="compute_track_progress.py" if="$(eval arg('number_of_cars')=='3')"
      args="racecar3 $(arg csv_filename) $(arg progression_file) $(arg experiment_number)"/>

    <!--I'll leave this here for now but we can also test if we want both cars to race using the mpc formulation-->
    <!-- <node pkg="mpc" type="mpcc_hyperplanes.py" name="mpc_node2" output="$(arg output)" if="$(eval arg('mpc_model')==0)" args="racecar" required="true"/> -->

</launch>