<?xml version="1.0"?>
<launch>
  
    <!--initialize the arguments-->
    <arg name="world_name" default="track_porto"/>
    <arg name="car_name" default="racecar"/>
    <arg name="gui" default="true" />

    <!--network model utilized for end-to-end driving-->
    <!--<arg name="model_name" default="minivgg_1.hdf5"/>-->
    <arg name="model_name" default="minivgg_center_data.hdf5"/>

    <!--waypoint file used by pure pursuit algorithm-->
    <arg name="csv_filename" default="track_porto_26780.csv"/>
    
    <!--flag that limits experiment to LEC only control-->
    <arg name="lec_only" default="false"/>

    <!--occupancy grid of selected track-->
    <arg name="map_file" default="$(find race)/maps/porto_track.yaml"/>

    <!--random seed used to allocte obstacles within vehicle environment-->
    <arg name="random_seed" default = "15"/>

    <!-- free space points within occupancy grid, this file is generated by gen_map.py 
    within the race package-->
    <arg name="freespace_file" default ="porto_freespace.txt"/>

    <!-- how many obstacles (cones) to allocate in the environment-->
    <arg name="num_obstacles" default="6"/>

    <!--experiment_number this parameter helps associate collisions with particular experiments-->
    <arg name="experiment_number" default="0"/>

    <!--reset on crash-->
    <arg name="reset_on_crash" default="false"/>

    <!--how long to run each experiment before timeout-->
    <arg name="timeout" default = "-1"/>

    <!-- name of collision log file-->
    <arg name="collision_file" default ="collisions_e2e.txt"/>

      <!--docker requirements-->
    <arg name="use_sim_time" default = "true"/>
    <arg name="verbose" default ="true"/>
    <!--launch the simulator-->
    <include file="$(find race)/launch/f1_tenth_devel.launch">
        <arg name ="world_name" value="$(arg world_name)"/>
        <arg name="verbose" value="$(arg verbose)"/>
        <arg name="use_sim_time" default = "$(arg use_sim_time)"/>
        <arg name="gui" value="$(arg gui)" />
    </include>

    <!--launch the speed node it will be constant in this case-->
    <node name="speed_node_$(arg car_name)" pkg="race" type="speed_node.py" unless="$(arg lec_only)" args='$(arg car_name)'/>

    <!--launch the lec model node-->
    <node pkg="computer_vision" name="lec_model" type="ros_classifier.py" unless="$(arg lec_only)" args="$(arg car_name) $(find computer_vision)models/$(arg model_name) 1" required="true" output="log"/>
    <node pkg="computer_vision" name="lec_model" type="ros_classifier.py" if="$(arg lec_only)" args="$(arg car_name) $(find computer_vision)models/$(arg model_name)"  required="true" output="log"/>

    <!-- Run map server -->
	<node name="map_server" pkg="map_server" type="map_server" unless="$(arg lec_only)" args="$(arg map_file)" />

    <!-- generation of safety controller-->
    <node pkg="race" type="safety_controller.py" name="safety_node" unless="$(arg lec_only)" args="racecar/scan racecar/safety" output="screen"/>

    <!--launch rviz to visualize reachable set-->
    <node pkg="rviz" type="rviz" name="rviz_display"  args="-d $(find race)/rviz/rtreach.rviz" if="$(arg gui)" output="log"/>

    <!--generation of obtacles and visualization in rviz -->
    <node pkg="racecar_gazebo" type="spawn_cone.py" name="spawn_cones" unless="$(arg lec_only)" args = "$(arg random_seed) $(arg freespace_file) $(arg num_obstacles)" output="screen"/>

    <!--time out node-->
    <node pkg="racecar_gazebo" type="kill_simulation.py" name="timeout" unless="$(arg lec_only)" required="true" args = "$(arg timeout)" output="screen"/>

    <!--launch rviz to visualize reachable set-->
    <node pkg="rtreach" type="benchmark_node" name="benchmark_node" unless="$(arg lec_only)" args="porto_obstacles.txt" output="screen"/>

    <node pkg = "race" name= "collision_logger_$(arg car_name)" output="screen" unless = "$(arg reset_on_crash)" required="true" type ="collision_logger.py" args="$(arg car_name) $(arg num_obstacles) $(arg random_seed) $(arg collision_file) $(arg experiment_number)"/>

    <!--ttc node-->
    <node pkg="race" type="ttc.py" name="ttc" unless="$(arg lec_only)" required="true" args = "$(arg car_name)" output="screen"/>
</launch>