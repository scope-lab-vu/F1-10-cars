<?xml version="1.0"?>
<launch>
  
    <!--initialize the arguments-->
    <arg name="world_number" default="0"/>
    <arg name="car_name" default="racecar"/>
    <arg name="gui" default="false" />
    <arg name="lrviz" default="true"/>
    <arg name="velocity" default="1.0"/>
    <arg name="algorithm" default="0"/>
    <arg name="wall_time" default="25"/>


    <!--random seed used to allocte obstacles within vehicle environment-->
    <arg name="random_seed" default = "15"/>
    <!--how long to run each experiment before timeout-->
    <arg name="timeout" default = "-1"/>

    <!--network model utilized for end-to-end driving-->
    <!--<arg name="model_name" default="dave_center.hdf5"/>-->
    <arg name="model_name" default="dave_elu_adam_82.hdf5"/>

     <!-- we have the option to reset after a collision-->
    <arg name="reset_on_crash" default="false"/>
    


    <!--experiment_number this parameter helps associate collisions with particular experiments-->
    <arg name="experiment_number" default="0"/>

    <arg name="model_name2" default="fnn_lidar_porto.hdf5"/>
    <arg name="model_name3" default="fnn_lidar_all.hdf5"/>

    <!-- how many obstacles (cones) to allocate in the environment-->
    <arg name="num_obstacles" default="6"/>

    <!--generation of obtacles and visualization in rviz -->
    <node pkg="racecar_gazebo" type="spawn_cone.py" name="spawn_cones" args = "$(arg random_seed) porto_freespace.txt $(arg num_obstacles)" output="screen"/>

    <!--Handles selecting a track-->
    <arg name="world_name" if="$(eval arg('world_number')==0)" value="track_porto"/>
    <arg name="world_name" if="$(eval arg('world_number')==1)" value="racecar_walker"/>
    <arg name="world_name" if="$(eval arg('world_number')==2)" value="track_barca"/>

    <!--Handles finding the map file -->
    <arg name="map_name" if="$(eval arg('world_number')==0)" value="porto_track.yaml"/>
    <arg name="map_name" if="$(eval arg('world_number')==1)" value="racecar_walker.yaml"/>
    <arg name="map_name" if="$(eval arg('world_number')==2)" value="track_barca.yaml"/>

    <!--Handles finding the wall points-->
    <arg name="wall_points" if="$(eval arg('world_number')==0)" value="porto_obstacles.txt"/>
    <arg name="wall_points" if="$(eval arg('world_number')==1)" value="racecar_walker_obstacles.txt"/>
    <arg name="wall_points" if="$(eval arg('world_number')==2)" value="track_barca_obstacles.txt"/>

    <arg name="algorithm_name" if="$(eval arg('algorithm')==0)" value="e2e_image_rtreach"/>
    <arg name="algorithm_name" if="$(eval arg('algorithm')==1)" value="e2e_rtreach"/>
    <arg name="algorithm_name" if="$(eval arg('algorithm')==2)" value="sac_rtreach"/>
    <arg name="algorithm_name" if="$(eval arg('algorithm')==3)" value="ars_rtreach"/>
    <arg name="algorithm_name" if="$(eval arg('algorithm')==4)" value="e2e_all_rtreach"/>


    <!-- name of collision log file-->
    <arg name="collision_file" value ="collisions_rteach_$(arg algorithm_name)_$(arg world_name)_$(arg velocity)_$(arg wall_time)_$(arg num_obstacles).csv"/>

    <!--Launch The Controllers-->
    <node pkg="computer_vision" name="lec_model" type="ros_dave.py" if="$(eval arg('algorithm')==0)" args="$(arg car_name) $(find computer_vision)models/$(arg model_name) $(arg velocity) 1" required="true" output="screen"/>
    <!--End to end learning controller-->
    <node pkg="race" type="lidar_classification_node.py" name="e2e" required='true' if="$(eval arg('algorithm')==1)" args="$(arg car_name) $(find race)/models/$(arg model_name2) $(arg velocity) 1"/>
    <!--reinforcement learning controllers-->
    <node pkg="rl" name="sac_controller" type="sac_controller.py" if="$(eval arg('algorithm')==2)" args="$(arg car_name) $(arg velocity) 1" required="true" output="log"/>
    <node pkg="rl" name="lec_model" type="ars_controller.py" if="$(eval arg('algorithm')==3)"  args="$(arg car_name) 1" required="true" output="log"/>
    <!--<node pkg="rl" name="ddpg_controller" type="ddpg_controller.py" if="$(eval arg('algorithm')==3)" args="$(arg car_name) $(arg velocity) 1" required="true" output="log"/>-->

    <!--End to end learning controller-->
    <node pkg="race" type="lidar_classification_node.py" name="e2e_all" required='true' if="$(eval arg('algorithm')==4)" args="$(arg car_name) $(find race)/models/$(arg model_name3) $(arg velocity) 1"/>
 
    <!--occupancy grid of selected track-->
    <arg name="map_file" default="$(find race)/maps/$(arg map_name)"/>
	<node name="map_server" pkg="map_server" type="map_server" args="$(arg map_file)" />

    <!--RVIZ Display-->
    <node pkg="rviz" type="rviz" name="rviz_display"  args="-d $(find race)/rviz/rtreach.rviz" if="$(arg lrviz)" output="log"/>
    <!--docker requirements-->
    <arg name="use_sim_time" default = "true"/>
    <arg name="verbose" default ="false"/>
    <!--launch the simulator-->
    <include file="$(find race)/launch/f1_tenth_devel.launch">
        <arg name ="world_name" value="$(arg world_name)"/>
        <arg name="verbose" value="$(arg verbose)"/>
        <arg name="use_sim_time" default = "$(arg use_sim_time)"/>
        <arg name="gui" value="$(arg gui)" />
    </include>

    <!--launch the speed node it will be constant in this case-->
    <node name="speed_node_$(arg car_name)" pkg="race" type="speed_node.py"  args='$(arg car_name) $(arg velocity)'/>

    <!--collision logging-->
    <node pkg = "race" name= "collision_logger_$(arg car_name)" output="screen" unless = "$(arg reset_on_crash)" required="true" type ="collision_logger.py" args="$(arg car_name) $(arg num_obstacles) $(arg random_seed) $(arg collision_file) $(arg experiment_number)"/>

    <!-- generation of safety controller-->
    <node pkg="race" type="safety_controller.py" name="safety_node" args="racecar/scan racecar/safety" output="screen"/>

    <!--time out node-->
    <node pkg="racecar_gazebo" type="kill_simulation.py" name="timeout" required="true" args = "$(arg timeout)" output="screen"/>

    <!--launch rviz to visualize reachable set-->
    <node pkg="rtreach" type="benchmark_node" name="benchmark_node" args="$(arg wall_points) $(arg algorithm_name) $(arg world_name) $(arg velocity) $(arg wall_time) $(arg experiment_number)" output="screen"/>

    <!--This will be deprecated soon-->
    <!--ttc node-->
    <node pkg="race" type="ttc.py" name="ttc" required="true" args = "$(arg car_name)" output="screen"/>
</launch>