<?xml version="1.0"?>
<launch>

<!--This prevents the gazebo from displaying in a window
    The idea is this will help with performance. We will 
    have to see-->
<arg name="gui" default="false" />
<!--How many boxes to let rviz visualize-->
<arg name="box_display_limit" default="100"/>
<!-- reach-time is the time we are computing reachability for-->
<arg name="reach_time" default="0.8"/>

<!--experiment_number this parameter helps associate collisions with particular experiments-->
<arg name="experiment_number" default="0"/>

<!--wall-time is the time we allow the reachability algorithm to run for-->
<arg name="wall_time" default="1.0"/>

<!--prevent reach nodes from being launched within docker. That will be done seperately-->
<arg name="docker" default="false"/>

<!--velocity-->
<arg name="velocity" default="1.0"/>

<arg name="debug" default=""/>
<!--number of vehicles to launch in the simulation environment-->
<arg name='number_of_cars' default='2'/>

<!--how long to run each experiment before timeout-->
<arg name="timeout" default = "60"/>

<!--Select the car we are computing reachability for-->
<arg name='car_name' default='racecar2'/>

<arg name="rviz_disp" default="multiagent_reach.rviz"/>

<!--network model utilized for end-to-end driving-->
<arg name="model_name" default="fnn_lidar_porto.hdf5"/>

<!--algorithm_number-->
<arg name="algorithm" default="0"/>
<arg name="algorithm_name" if="$(eval arg('algorithm')==0)" value="e2e"/>
<arg name="algorithm_name" if="$(eval arg('algorithm')==1)" value="disparity_extender"/>
<arg name="algorithm_name" if="$(eval arg('algorithm')==2)" value="pure_pursuit"/>

<!--End to end learning controller-->
<node pkg="race" type="lidar_classification_node.py" name="e2e" required='true' if="$(eval arg('algorithm')==0)" args="$(arg car_name) $(find race)/models/$(arg model_name) $(arg velocity) 1"/>
<node pkg="race" name="disparity_extender_angle_msg" if="$(eval arg('algorithm')==1)" type="disparity_extender_vanderbilt.py" args="racecar2 racecar2/angle_msg"/>
<node pkg="pure_pursuit" name="pure_pursuit_node" if="$(eval arg('algorithm')==2)" type="pure_pursuit_angle.py" args="racecar2 track_porto_26780.csv racecar2/angle_msg"/>

<!--  This is the main launch file that launches the world, plugins, controllers, vehicles -->
  <include file="$(find race)/launch/multi_parametrizeable.launch">
      <arg name="number_of_cars" value="$(arg number_of_cars)"/>
      <arg name="gui" value="$(arg gui)"/>
      <arg name="rviz_disp" value="$(arg rviz_disp)"/>
  </include>

  <!--launch the speed node it will be constant in this case-->
  <node name="speed_node_$(arg car_name)" pkg="race" type="speed_node.py"  args='$(arg car_name) $(arg velocity)'/>

  <!-- generation of safety controller-->
  <node pkg="race" type="safety_controller.py" name="safety_node" args="$(arg car_name)/scan $(arg car_name)/safety" output="screen"/>

  <!-- decision manager-->
  <node pkg="race" type="rtreach_decision_manager.py" name="decision_manager" args="$(arg car_name) vesc2 1" output="screen"/>


  <!-- These are the nodes for publishing the reachability information for each of the vehicles-->
  <node name="vehicle_1" pkg="rtreach" type="visualize_obs" unless="$(arg docker)" args="racecar  $(arg wall_time) $(arg reach_time) $(arg box_display_limit)" output="log"/>
  <node name="vehicle_2" pkg="rtreach" type="visualize_obs" unless="$(arg docker)" args="racecar3  $(arg wall_time) $(arg reach_time) $(arg box_display_limit)" output="log"/>

<!-- <node name="reach_agent" pkg="rtreach" type="visualize_node_dynamic" output="screen"/>  -->
<!--args="racecar $(arg reach_time) $(arg wall_time) $(arg box_display_limit)"/>-->

<!--Node for Visualizing reachsets that allows customization through parameters
<node name="vis_agent_param" pkg="rtreach" type="vis_node_param" output="screen" args=" 10 $(arg reach_time) $(arg box_display_limit) $(arg debug)"/>-->


<node pkg="race" name="disparity_extender_racear" type="disparity_extender_vanderbilt_gen.py" args="racecar"/>
<node pkg="race" name="disparity_extender_racear3" if="$(eval arg('number_of_cars')==3)" type="disparity_extender_vanderbilt_gen.py" args="racecar3"/>


<!--Node for wall points-->
<node name="wall_points" unless="$(arg docker)" pkg="rtreach" type="publish_wall_points.py" output="screen" args="porto"/>

<!--Reachability safety node that incorporates dynamic obstacles-->
<node name="benchmark_agent_param" unless="$(arg docker)" pkg="rtreach" type="benchmark_node_dyn" output="screen" args=" $(arg wall_time) $(arg reach_time) $(arg box_display_limit) $(arg debug)"/>

<!--kill simulation-->
<node pkg="racecar_gazebo" type="kill_simulation.py" name="timeout" required="true" args = "$(arg timeout)" output="screen"/>

<!--ttc node-->
<node pkg="race" type="ttc.py" name="ttc" required="true" args = "$(arg car_name)" output="screen"/>

<!--aggregation node-->
<node pkg="race" type="compute_safety_percentage.py" name="safety_aggregator" args="$(arg algorithm_name) $(arg velocity) $(arg experiment_number)" required="true" output="screen"/>

<!--plot reachability results
<node pkg="race" type="plot_reachability_results.py" name="res_plot" required="false" output="screen"/>-->

</launch>