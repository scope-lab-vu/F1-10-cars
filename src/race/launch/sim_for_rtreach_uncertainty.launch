<?xml version="1.0"?>
<launch>

    <!--This prevents the gazebo from displaying in a window
        The idea is this will help with performance. We will 
        have to see-->
    <arg name="gui" default="true" />

    <arg name="docker" default="false"/>

    <!--How many boxes to let rviz visualize-->
    <arg name="box_display_limit" default="100"/>
    <arg name="world_name" default="track_porto"/>

    <!-- reach-time is the time we are computing reachability for-->
    <arg name="reach_time" default="1.0"/>
    <arg name="map_file" default="$(find race)/maps/porto_track.yaml"/>

    <!--wall-time is the time we allow the reachability algorithm to run for-->
    <arg name="wall_time" default="1.0"/>

    <arg name="debug" default=""/>

    <!--how long to run each experiment before timeout-->
    <arg name="timeout" default = "-1"/>

    <arg name="parameter_uncertainty" default="0.0"/>
    <arg name="use_ground_truth" default="true"/>

    <arg name="use_particles" default="1"/>

    <!--number of vehicles to launch in the simulation environment-->
    <arg name='number_of_cars' default='2'/>

    <!--Select the car we are computing reachability for-->
    <arg name='car_name' default='racecar'/>

    <arg name="rviz_disp" default="multiagent_reach.rviz"/>

    <!--network model utilized for end-to-end driving-->
    <arg name="model_name" default="minivgg_center_data.hdf5"/>

    <!--Launch The Model-->
    <node pkg="computer_vision" name="lec_model" type="ros_classifier.py" args="$(arg car_name) $(find computer_vision)models/$(arg model_name) 1" required="true" output="log"/>

     <!--docker requirements-->
    <arg name="use_sim_time" default = "true"/>
    <arg name="verbose" default ="false"/>
    <!--launch the simulator-->
    <include file="$(find race)/launch/f1_tenth_devel.launch">
        <arg name ="world_name" value="$(arg world_name)"/>
        <arg name="verbose" value="$(arg verbose)"/>
        <arg name="use_sim_time" default = "$(arg use_sim_time)"/>
        <arg name="gui" value="$(arg gui)" />
    </include>

    <!--launch the speed node it will be constant in this case-->
    <node name="speed_node_$(arg car_name)" pkg="race" type="speed_node.py"  args='$(arg car_name) 0.7'/>

    <!-- generation of safety controller-->
    <node pkg="race" type="safety_controller.py" name="safety_node" args="$(arg car_name)/scan $(arg car_name)/safety" output="screen"/>

    <!-- decision manager-->
    <!-- <node pkg="race" type="rtreach_decision_manager.py" name="decision_manager" args="$(arg car_name) vesc" output="screen"/> -->


    <!-- These are the nodes for publishing the reachability information for each of the vehicles-->
    <node name="vehicle_1" pkg="rtreach" type="visualize_obs" unless="$(arg docker)" args="racecar2   $(arg wall_time) $(arg reach_time) $(arg box_display_limit)" output="log"/>
    <node name="vehicle_2" pkg="rtreach" type="visualize_obs" unless="$(arg docker)" args="racecar3  $(arg wall_time) $(arg reach_time) $(arg box_display_limit)" output="log"/>

    <!--Node for Visualizing reachsets that allows customization through parameters
    <node name="vis_agent_param" pkg="rtreach" unless="$(arg docker)" type="vis_node_param" output="screen" args=" 10 $(arg reach_time) $(arg box_display_limit) $(arg debug)"/>-->


    <node pkg="race" name="disparity_extender_racear" type="disparity_extender_vanderbilt_gen.py" args="racecar2"/>
    <node pkg="race" name="disparity_extender_racear3" if="$(eval arg('number_of_cars')==3)" type="disparity_extender_vanderbilt_gen.py" args="racecar3"/>

    <!--Node for wall points-->
    <node name="wall_points" pkg="rtreach" type="publish_wall_points_v2.py" unless="$(arg docker)" output="screen" args="porto"/>

    <!--Reachability safety node that incorporates dynamic obstacles-->
    <node pkg="rtreach" type="reach_node_uncertain" output="screen" name="reach_node" unless="$(arg use_ground_truth)" args="$(arg wall_time) $(arg reach_time) $(arg box_display_limit) $(arg parameter_uncertainty) $(arg use_particles)" required="true"/>
    <node pkg="rtreach" type="reach_node_uncertain_gt" output="screen" name="reach_node_gt" if="$(arg use_ground_truth)" args="$(arg wall_time) $(arg reach_time) $(arg box_display_limit) $(arg parameter_uncertainty)" required="true"/>

    <!--launch rviz to visualize reachable set-->
    <node pkg="rviz" type="rviz" name="rviz_display"  args="-d $(find race)/rviz/rtreach2.rviz" if="$(arg gui)" output="log"/>

    
    <!--GPU based particle filtering from MIT -->
    <include file="$(find particle_filter)/launch/localize.launch" unless="$(arg use_ground_truth)">
      <arg name="scan_topic" default="racecar/scan"/>
	    <arg name="odometry_topic" default="racecar/odom"/>
      <arg name="laser_frame" default="racecar/laser"/>
    </include>

    <!-- Run map server -->
	<node name="map_server" pkg="map_server" type="map_server"  args="$(arg map_file)" />

    <!--kill simulation-->
    <node pkg="racecar_gazebo" type="kill_simulation.py" name="timeout" required="true" args = "$(arg timeout)" output="screen"/>

    <arg name="collision_file" value ="collisions_.csv"/>
    <node pkg = "mpc" name= "collision_logger_$(arg car_name)" required="true" type ="collision_logger.py" args="$(arg car_name) 5 5 5 5 5"/>


    <!--generation of obtacles and visualization in rviz -->
    <node pkg="rtreach" type="spawn_code_rtreach.py" name="spawn_cones" args = "1524 porto_freespace.txt 20" output="screen"/>


    <node pkg="race" type="send_initial_pose.py" name="send_initial_pose"  args="$(arg car_name)" output="screen"/>


    <!--plot reachability results-->
    <!-- <node pkg="race" type="plot_reachability_results.py" name="res_plot" required="false" output="screen"/> -->

</launch>